<?xml version="1.0" encoding="UTF-8"?>
<!-- Set some basic project information and targets -->
<project name="Subspace Build Script" default="build">

<target name="build" depends="clean, prepare, composer, dbupdate, lint, phpunit"/>
<target name="full-build" depends="clean, prepare, composer, dbupdate, lint, phpunit"/>

<property environment="env"/>
<property name="location.vendor" value="${basedir}/vendor"/>
<property name="location.vendor.bin" value="${basedir}/vendor/bin"/>
<property name="location.composer" value="${basedir}/vendor/bin/composer.phar"/>

<!-- Clean up from previous builds -->
 <target name="clean" description="Cleanup build artifacts">
  <echo message="Clean-up of previous build artefacts .......... [STARTED]" />
  <echo message="Clean-up of previous build artefacts .......... [COMPLETE]" />
 </target>

<!-- Prepare for the new build --> 
 <target name="prepare" depends="clean" description="Prepare for build">
  <echo message="Checking vendor directories all exist ......... [STARTED]" />
  <mkdir dir="${location.vendor}"/>
  <echo message="Vendor directory created ...................... [OK]" />
  <mkdir dir="${location.vendor.bin}"/>
  <echo message="Vendor Executable directory created ........... [OK]" />
  <echo message="Preparing for new build artefacts ............. [STARTED]" />
  <echo message="Preparing for new build artefacts ............. [COMPLETE]" />
 </target>

<!-- Check to see if Composer is downloaded -->
<target name="composer-check" depends="prepare">
  <echo message="Checking for presence of Composer file......... [STARTED]" />
  <available file="${location.composer}" property="composer.present"/>
  <echo message="Checking for presence of Composer file......... [COMPLETE]" />
  </target>

<!-- Download Composer -->
<target name="composer-download" depends="composer-check" unless="composer.present">
  <echo message="Downloading Composer .......................... [STARTED]" />
  <property name="composer.noselfupdate" value="true"/>
  <get src="https://getcomposer.org/composer.phar" dest="${location.composer}"/>
  <echo message="Downloading Composer .......................... [COMPLETE]" />
</target>
  
<target name="composer-selfupdate" depends="composer-download" unless="composer.noselfupdate">
  <echo message="Updating Composer ............................. [STARTED]" />
  <exec executable="php">
    <arg value="${location.composer}"/>
    <arg value="self-update"/>
  </exec>
  <echo message="Updating Composer ............................. [COMPLETE]" />
</target>

<target name="composer" depends="composer-selfupdate" unless="composer.noupdate" description="Run composer update">
  <echo message="Running Composer .............................. [STARTED]" />
  <exec executable="php">
    <arg value="-dmemory_limit=1G"/>
    <arg value="${location.composer}"/>
    <arg value="update"/>
  </exec>
  <echo message="Running Composer .............................. [COMPLETE]" />
</target>

<!-- Run any DB schema updates --> 
<target name="dbupdate" depends="clean" description="Update Schema">
  <echo message="Updating Database ............................. [STARTED]" />
  <exec executable="php" failonerror="true">
    <arg value='bin/console' />
      <arg value="doctrine:schema:update" />
      <arg value='-n' />
  </exec>
  <echo message="Updating Database ............................. [COMPLETE]" />
</target>

<!-- Lint the PHP files in app dir. Linting the whole framework library takes forever -->
 <target name="lint" description="Perform syntax check of sourcecode files">
  <apply executable="php" failonerror="true">
   <arg value="-l" />  
    <fileset dir="${basedir}/app">
      <include name="**/*.php" />
    <modified />
   </fileset>
  </apply>
 </target>
 
<!-- PHP Code Sniffer - tokenises PHP, JS and CSS files and detects violations of defined coding standards --> 
 <target name="phpcs" description="Check code with PHP Code Sniffer">
 <exec executable="phpcs">
  <arg value="-n" />
  <arg value="--extensions=php" />
  <arg value="--error-severity=1" />
  <arg path="${basedir}/app" />
 </exec>
</target> 

<!-- Kick off phpunit --> 
 <target name="phpunit">
  <echo message="Running PHPUnit ............................... [STARTED]" />
    <condition property="phpunit-executable" value="${basedir}/vendor/bin/phpunit.bat" else="${basedir}/vendor/bin/phpunit">
    <and>
      <os family="windows"/>
    </and>
  </condition>
  <echo message="Environment is ${os.name} therefore executable set to ${phpunit-executable}." />
  <exec dir="${basedir}" executable="${phpunit-executable}" failonerror="false" description="Run unit app with PHPUnit">
  <arg line="--verbose" />   
  </exec>
  <echo message="Running PHPUnit ............................... [COMPLETE]" />
 </target>

</project>